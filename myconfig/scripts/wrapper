#!/bin/bash

### TODO: support bashrc

#### Initialize directory ####
detect_dir() {
    local SCRIPT_ABSOLUTE=$(realpath $0)

    PALUDIS_CONFIG_DIR=$(realpath $(dirname $(realpath $SCRIPT_ABSOLUTE))/../../)

    SCRIPT_DIR=$(realpath $(dirname ${SCRIPT_ABSOLUTE}) --relative-base=${PALUDIS_CONFIG_DIR})
    CONFIG_DIR=$(dirname ${SCRIPT_DIR})

    local INVOKER=$(realpath -s $(realpath $(dirname $0))/$(basename $0) --relative-base=${PALUDIS_CONFIG_DIR})
    ACTION=$(echo ${INVOKER%.bash}/ | cut -d/ -f1)
    SUB_ACTION=$(echo ${INVOKER%.bash}/ | cut -d/ -f2)

    HOST=`hostname | cut -d. -f1`

    print_debug_info() {
	echo "Paludis dir:" ${PALUDIS_CONFIG_DIR}
	echo "Script dir:" ${SCRIPT_DIR}
	echo "Config dir:" ${CONFIG_DIR}
	echo "Action:" ${ACTION} ${SUB_ACTION}
	echo "Hostname:" ${HOST}
    }
    #print_debug_info 1>&2
}

detect_dir

pushd $PALUDIS_CONFIG_DIR >/dev/null

source ${SCRIPT_DIR}/config
source ${SCRIPT_DIR}/utils

detect_destination() {
    local SUB_REPO=$(echo ${1}- | cut -d- -f2)

    if [[ x$SUB_REPO == "x" ]]; then
	DESTINATION=/var/db/paludis/repositories/installed/local
    else
	DESTINATION=/var/db/paludis/repositories/installed/container/$SUB_REPO
    fi

    WORLD=${DESTINATION}/world
}

detect_destination ${CAVE_PERFORM_CMDLINE_destination}

####### Action handlers #######
show_general() {
    echo root = /
    echo world = ${root}/${WORLD}
}

show_platforms() {
    echo "${PLATFORMS}"
}

## TODO should not use `cat $WORLD` as sets
show_options() {
    echo "### Global options:"
    echo "${OPTIONS}"
    for set in $(cat ${WORLD}); do
	echo
	echo "### Options for set --$set--"
	cat $(find_set $set) | remove_comment_and_platform | remove_custom_mark | awk '{if (NF>1) print}'
    done
}

show_package_unmask() {
    for set in $(cat ${WORLD}); do
	echo
	echo "### Package unmasks for set --$set--"
	cat $(find_set $set) | remove_comment_and_platform | sed -r -n '/\+/ s/[[:blank:]]*([[:punct:][:alnum:]]+).*\+/\1/ p'
    done
}

show_mirrors() {
    add_mirror()
    {
	url_base=$1
	set -- $2
    
	url="$url_base/${2:-$1}"
	name=$1

	num=${#MIRRORS[@]}
	for ((i=0; i<$num; i++)); do
	    set -- ${MIRRORS[i]}
	    if [[ $name == $1 ]]; then
		MIRRORS[i]+=" $url"
		return 0
	    fi
	done
	MIRRORS+=( "$name $url" )
	return 0
    }

    local MIRRORS=()
    for site in ${SITES[@]}; do
	eval site=\( \${${site}[@]} \)
	set -- ${site[@]}
	local url_base=$1
	shift
	while [[ $# -gt 0 ]]; do
	    add_mirror "$url_base" "$1"
	    shift
	done
    done

    for m in "${MIRRORS[@]}"; do
	echo ${m}
    done
}

show_suggestions() {
    for set in $(cat ${WORLD}); do
	echo 
	echo "### Package suggestions for set --$set--"
	cat $(find_set $set) | remove_comment_and_platform | sed -r -n '/&/ s/[[:blank:]]*([[:punct:][:alnum:]]+).*&/\1\t/ p'
    done
}

show_sets() {
    cat $(find_set $1) | remove_comment_and_platform | awk '!/^[[:blank:]*]/ {print "* " $1}'
}

show_repositories() {
    local REPO=$(echo ${1}- | cut -d- -f1)
    local SUB_REPO=$(echo ${1}- | cut -d- -f2)
    
    case $REPO in
	installed)
	    detect_destination $1

	    echo format = exndbam
	    echo location = $DESTINATION

	    if [[ x$SUB_REPO == "x" ]]; then
		echo
	    else
		echo root = /media/btrfs_raid6_MD1000_4_WD1003FBYX/linux/container/system/exherbo/$SUB_REPO
		echo name = $1
	    fi
	    ;;

	binary)
	    cat <<EOF
format = e
sync = git+ssh://git@github.com/sunbing81/subi-bin.git
sync_options = --no-reset
#importance = -1
EOF

	    if [[ x$HOST == xfs-3 ]]; then
		cat <<EOF
location = /media/btrfs_raid6_MD1000_4_WD1003FBYX/linux/paludis/repositories/binary/repository
binary_destination = true
binary_distdir = /media/btrfs_raid6_MD1000_4_WD1003FBYX/linux/paludis/repositories/binary/distfiles
binary_keywords_filter = amd64 ~amd64
binary_uri_prefix = mirror://exherbo-binary/
EOF
	    else
		echo location = ${root}/var/db/paludis/repositories/binary
	    fi
	    ;;
	*)
	    echo "Unsupported repository" 1>&2
	    ;;
    esac
}

show_repository_defaults() {
    echo names_cache = /var/cache/paludis/names
    echo write_cache = /var/cache/paludis/metadata
    ## 2013-11-7: shallow clone failed
    #sync_options = --git-clone-option=--depth=1 --git-pull-option=--depth=1  --git-fetch-option=--depth=1
}

##### Dispatcher ####
if [[ -d ${CONFIG_DIR} ]]; then
    if type show_${ACTION} >/dev/null 2>&1; then
	show_${ACTION} ${SUB_ACTION}
    else
	echo "Not supported action: " ${ACTION} 1>&2
    fi
else
    echo "The config dir does not exist."
fi

#### Finalize ####
popd >/dev/null

